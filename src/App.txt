import { useEffect, useMemo, useRef, useState, useCallback } from "react";
import "./index.css";
import type * as L from "leaflet";

/* ====== Leaflet (React-Leaflet + Vite) ====== */
import "leaflet/dist/leaflet.css";

import {
  MapContainer,
  TileLayer,
  Marker,
  Polyline,
  Popup,
  useMap,
} from "react-leaflet";

// Importar Leaflet como espacio de nombres (valor) + tipos aparte
import type { LatLngExpression, LeafletMouseEvent } from "leaflet";

// Importar assets como m√≥dulos para que Vite los resuelva en build
import marker2xUrl from "leaflet/dist/images/marker-icon-2x.png";
import marker1xUrl from "leaflet/dist/images/marker-icon.png";
import markerShadowUrl from "leaflet/dist/images/marker-shadow.png";

// Definir un √≠cono por defecto completo (tama√±os/anchors) y aplicarlo a L.Marker
const DefaultIcon = L.icon({
  iconUrl: marker1xUrl,
  iconRetinaUrl: marker2xUrl,
  shadowUrl: markerShadowUrl,
  // Estos tama√±os/anchors son los del tema por defecto de Leaflet
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  tooltipAnchor: [16, -28],
  shadowSize: [41, 41],
});

// Aplicar globalmente para todos los <Marker />
L.Marker.prototype.options.icon = DefaultIcon;

/* ====== Configuraci√≥n de negocio ====== */
const WHATSAPP_NUMBER = "5493760000000"; // reemplaz√° por tu n√∫mero (sin + ni espacios)

const VEHICLES = {
  moto: { label: "Moto", base: 1500, perKm: 300, maxVolumen: "Caja chica" },
  camioneta: { label: "Camioneta", base: 10000, perKm: 750, maxVolumen: "2-3 bultos" },
  camion: { label: "Cami√≥n", base: 15000, perKm: 1000, maxVolumen: "Carga mediana" },
} as const;
type VehicleKey = keyof typeof VEHICLES;

const VEHICLE_AVAILABLE: Record<VehicleKey, boolean> = {
  moto: false,
  camioneta: true,   // √∫nico disponible
  camion: false,
};

// Icono personalizado Jinete para ambos pines
const jineteIcon = new L.Icon({
  iconUrl: "/images/jinete.png", // viene de /public
  iconSize: [40, 40],            // ajust√° si lo quer√©s m√°s grande/peque√±o
  iconAnchor: [20, 40],          // punta del pin (x,y) sobre el punto del mapa
  popupAnchor: [0, -36],         // posici√≥n del popup relativo al icono
});

// im√°genes (pon√© archivos en /public/images/)
const VEHICLE_IMAGES: Record<VehicleKey, string> = {
  moto: "/images/moto.jpg",
  camioneta: "/images/camioneta.png",
  camion: "/images/camion.jpg",
};

function formatARS(n: number) {
  return n.toLocaleString("es-AR", {
    style: "currency",
    currency: "ARS",
    maximumFractionDigits: 0,
  });
}
function formatDateTimeLocal(dtStr: string) {
  if (!dtStr) return "‚Äî";
  const d = new Date(dtStr);
  return d.toLocaleString("es-AR", { dateStyle: "short", timeStyle: "short" });
}

/* ====== Helpers de geocoding / routing (sin API key) ====== */
type Pt = { lat: number; lon: number };
const toLatLng = (p: Pt): LatLngExpression => [p.lat, p.lon];

async function geocode(address: string) {
  const url = `https://nominatim.openstreetmap.org/search?format=json&limit=1&q=${encodeURIComponent(
    address
  )}`;
  const res = await fetch(url, { headers: { Accept: "application/json" } });
  if (!res.ok) throw new Error("Geocoding error");
  const data = (await res.json()) as Array<{ lat: string; lon: string }>;
  if (!data.length) throw new Error("No se encontraron resultados");
  const { lat, lon } = data[0];
  return { lat: Number(lat), lon: Number(lon) } as Pt;
}

async function routeOSRM(from: Pt, to: Pt) {
  const coords = `${from.lon},${from.lat};${to.lon},${to.lat}`;
  const url = `https://router.project-osrm.org/route/v1/driving/${coords}?overview=full&geometries=geojson`;
  const res = await fetch(url);
  if (!res.ok) throw new Error("Routing error");
  const data = await res.json();
  if (!data.routes?.length) throw new Error("Sin ruta");
  const meters: number = data.routes[0].distance;
  const geo: [number, number][] = data.routes[0].geometry.coordinates; // [lon, lat]
  const latlngs: LatLngExpression[] = geo.map(([lon, lat]) => [lat, lon]); // Leaflet usa [lat,lon]
  const km = Math.max(0, Math.round(meters / 100) / 10); // redondeo a 0.1 km
  return { km, latlngs };
}

/* ====== Ajuste de vista del mapa ====== */
function FitBounds({ from, to }: { from?: Pt; to?: Pt }) {
  const map = useMap();
  useEffect(() => {
    if (from && to) {
      const b = L.latLngBounds([toLatLng(from), toLatLng(to)]);
      map.fitBounds(b, { padding: [30, 30] });
    } else if (from) {
      map.setView(toLatLng(from), 14);
    }
  }, [from, to, map]);
  return null;
}

/* ====== Utilidad para min del datetime-local (zona local) ====== */
function nowLocalForInput() {
  const tzOffset = new Date().getTimezoneOffset() * 60000;
  return new Date(Date.now() - tzOffset).toISOString().slice(0, 16);
}

export default function App() {
  // Datos del formulario
const mapRef = useRef<L.Map | null>(null);

const onMapClick = useCallback((ev: L.LeafletMouseEvent) => {
  const p = { lat: ev.latlng.lat, lon: ev.latlng.lng };
  if (!from || (from && to)) setFrom(p);
  else setTo(p);
}, [from, to, setFrom, setTo]);

  const [nombre, setNombre] = useState("");
  const [telefono, setTelefono] = useState("");
  const [origen, setOrigen] = useState("");
  const [destino, setDestino] = useState("");
  const [vehiculo, setVehiculo] = useState<VehicleKey>("camioneta"); // √∫nico elegible
  const [km, setKm] = useState<string>("5");
  const [ayudante, setAyudante] = useState(false);
  const [facturaA, setFacturaA] = useState(false);
  const [notas, setNotas] = useState("");
  const [pickupAt, setPickupAt] = useState<string>(""); // fecha/hora

  // Estado del mapa / c√°lculo
  const [from, setFrom] = useState<Pt | undefined>();
  const [to, setTo] = useState<Pt | undefined>();
  const [route, setRoute] = useState<LatLngExpression[]>([]);
  const [calcStatus, setCalcStatus] = useState<"idle" | "loading" | "error">("idle");
  const [calcMsg, setCalcMsg] = useState("");

  /* Geocodificar al tipear */
  const debounceRef = useRef<number | null>(null);
  useEffect(() => {
    if (debounceRef.current) window.clearTimeout(debounceRef.current);
    if (origen.trim().length < 3 && destino.trim().length < 3) {
      setCalcStatus("idle");
      return;
    }
    debounceRef.current = window.setTimeout(async () => {
      try {
        setCalcStatus("loading");
        setCalcMsg("Buscando direcciones‚Ä¶");
        const nf = origen.trim().length >= 3 ? await geocode(origen) : undefined;
        const nt = destino.trim().length >= 3 ? await geocode(destino) : undefined;
        setFrom(nf);
        setTo(nt);
        setCalcStatus("idle");
        setCalcMsg("");
      } catch {
        setCalcStatus("error");
        setCalcMsg("No se pudo geocodificar alguna direcci√≥n.");
      }
    }, 600);

    return () => {
      if (debounceRef.current) window.clearTimeout(debounceRef.current);
    };
  }, [origen, destino]);

  /* Calcular ruta (y km) cuando hay ambos puntos */
  useEffect(() => {
    (async () => {
      if (from && to) {
        try {
          setCalcStatus("loading");
          setCalcMsg("Calculando ruta‚Ä¶");
          const r = await routeOSRM(from, to);
          setRoute(r.latlngs);
          setKm(String(r.km));
          setCalcStatus("idle");
          setCalcMsg("");
        } catch {
          setCalcStatus("error");
          setCalcMsg("No se pudo calcular la ruta.");
          setRoute([]);
        }
      } else {
        setRoute([]);
      }
    })();
  }, [from, to]);

  /* Clic en el mapa: primero origen, luego destino; arrastrables */
  const nextIsFrom = useMemo(() => !from || (from && to), [from, to]);
  function handleMapClick(e: L.LeafletMouseEvent) {
    const p = { lat: e.latlng.lat, lon: e.latlng.lng };
    if (nextIsFrom) setFrom(p);
    else setTo(p);
  }
  function useMyLocation() {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition((pos) => {
      setFrom({ lat: pos.coords.latitude, lon: pos.coords.longitude });
    });
  }

  /* Descuento por anticipo (>= 24h) */
  const anticipado = useMemo(() => {
    if (!pickupAt) return false;
    const when = new Date(pickupAt).getTime();
    return when - Date.now() >= 24 * 60 * 60 * 1000;
  }, [pickupAt]);

  /* Precio */
  const precio = useMemo(() => {
    const kmNum = Math.max(0, Number(km) || 0);
    const v = VEHICLES[vehiculo];
    const cargoKm = v.perKm * kmNum;
    const extraAyudante = ayudante ? 7500 : 0;

    const subtotal = v.base + cargoKm + extraAyudante;
    const descuentoAnticipo = anticipado ? subtotal * 0.1 : 0;

    const baseParaFactura = subtotal - descuentoAnticipo;
    const recargoFacturaA = facturaA ? baseParaFactura * 0.1 : 0;

    const total = Math.round(baseParaFactura + recargoFacturaA);

    return {
      baseVehiculo: v.base,
      perKm: v.perKm,
      km: kmNum,
      cargoKm,
      extraAyudante,
      descuentoAnticipo,
      recargoFacturaA,
      total,
    };
  }, [vehiculo, km, ayudante, facturaA, anticipado]);

  /* WhatsApp */
  function buildWhatsAppURL() {
    const v = VEHICLES[vehiculo];
    const lineas = [
      `üöö *Pedido de flete* - tuflete`,
      `üë§ Nombre: ${nombre || "‚Äî"}`,
      telefono ? `üìû Tel: ${telefono}` : null,
      `üì¶ Veh√≠culo: ${v.label}`,
      `üìç Origen: ${origen || "‚Äî"}`,
      `üéØ Destino: ${destino || "‚Äî"}`,
      `‚è∞ Reserva: ${formatDateTimeLocal(pickupAt)}`,
      `üìè Distancia: ${precio.km} km`,
      ayudante ? `üßë‚Äçüîß Con ayudante: S√≠` : `üßë‚Äçüîß Con ayudante: No`,
      facturaA ? `üßæ Factura: A` : `üßæ Factura: B / C`,
      anticipado ? `üè∑Ô∏è Descuento por anticipo aplicado (10%)` : null,
      notas ? `üìù Notas: ${notas}` : null,
      "",
      `üí∞ Estimado: ${formatARS(precio.total)} (Base ${formatARS(
        precio.baseVehiculo
      )} + ${formatARS(precio.perKm)} x km + extras${anticipado ? " - 10% anticipo" : ""}${
        facturaA ? " + recargo Factura A" : ""
      })`,
    ]
      .filter(Boolean)
      .join("\n");
    return `https://wa.me/${WHATSAPP_NUMBER}?text=${encodeURIComponent(lineas)}`;
  }

  const canQuote = origen.trim() && destino.trim() && Number(km) > 0;

  return (
    <main className="min-h-screen bg-gray-50 text-gray-900">
      {/* NAV */}
      <nav className="sticky top-0 z-10 w-full border-b bg-white/80 backdrop-blur">
        <div className="mx-auto flex max-w-6xl items-center justify-between px-4 py-3">
          <div className="flex items-center gap-2">
            <span className="inline-flex h-9 w-9 items-center justify-center rounded-xl border bg-gray-50 font-bold">
              TF
            </span>
            <span className="text-lg font-semibold tracking-tight">tuflete</span>
          </div>
          <a
            href="#cotizar"
            className="rounded-xl border px-3 py-1.5 text-sm font-medium hover:border-indigo-400 hover:bg-indigo-50"
          >
            Pedir ahora
          </a>
        </div>
      </nav>

      {/* HERO */}
      <header className="mx-auto max-w-6xl px-4 py-10 md:py-14">
        <h1 className="text-4xl font-bold tracking-tight md:text-5xl">
          Fletes de √∫ltima milla en <span className="text-indigo-600">minutos</span>
        </h1>
        <p className="mt-3 text-gray-600">
          Retiro y entrega puerta a puerta. Tarifas claras. Pedilo por WhatsApp.
        </p>
      </header>

      {/* FORM + MAPA */}
      <section id="cotizar" className="mx-auto max-w-6xl px-4 pb-12">
        <div className="grid gap-6 md:grid-cols-3">
          <div className="md:col-span-2 rounded-2xl border bg-white p-6 shadow-sm">
            <h2 className="text-xl font-semibold">Cotiz√° tu env√≠o</h2>

            <div className="mt-5 grid gap-4 md:grid-cols-2">
              {/* Nombre y Tel√©fono */}
              <div className="md:col-span-2">
                <label className="mb-1 block text-sm font-medium">Nombre</label>
                <input
                  value={nombre}
                  onChange={(e) => setNombre(e.target.value)}
                  className="w-full rounded-xl border px-3 py-2 outline-none focus:border-indigo-400"
                  placeholder="Tu nombre"
                />
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">Tel√©fono (opcional)</label>
                <input
                  value={telefono}
                  onChange={(e) => setTelefono(e.target.value)}
                  className="w-full rounded-xl border px-3 py-2 outline-none focus:border-indigo-400"
                  placeholder="+54 9 ..."
                />
              </div>

              {/* Fecha y hora */}
              <div className="md:col-span-2">
                <label className="mb-1 block text-sm font-medium">Fecha y hora de reserva</label>
                <input
                  type="datetime-local"
                  min={nowLocalForInput()}
                  value={pickupAt}
                  onChange={(e) => setPickupAt(e.target.value)}
                  className="w-full rounded-xl border px-3 py-2 outline-none focus:border-indigo-400"
                />
                <div className="mt-1 flex items-center gap-3 text-xs">
                  <span className="text-gray-500">
                    {pickupAt ? `Seleccionado: ${formatDateTimeLocal(pickupAt)}` : "Seleccion√° d√≠a y hora"}
                  </span>
                  {anticipado && (
                    <span className="rounded-full bg-green-100 px-2 py-0.5 font-medium text-green-700">
                      10% OFF por reserva anticipada
                    </span>
                  )}
                </div>
              </div>

              {/* Veh√≠culo (solo lectura; se elige en la barra lateral) */}
              <div className="md:col-span-2">
                <label className="mb-1 block text-sm font-medium">Veh√≠culo</label>
                <div className="flex items-center justify-between rounded-xl border bg-gray-50 px-3 py-2">
                  <span className="text-sm">
                    {VEHICLES[vehiculo].label} ‚Äî base {formatARS(VEHICLES[vehiculo].base)} / {formatARS(VEHICLES[vehiculo].perKm)} x km
                  </span>
                  <span className="text-xs text-gray-500">Elegilo en la barra lateral</span>
                </div>
              </div>

              {/* Origen / Destino */}
              <div className="md:col-span-2">
                <label className="mb-1 block text-sm font-medium">Origen</label>
                <input
                  value={origen}
                  onChange={(e) => setOrigen(e.target.value)}
                  className="w-full rounded-xl border px-3 py-2 outline-none focus:border-indigo-400"
                  placeholder="Direcci√≥n de retiro (calle, nro, ciudad)"
                />
              </div>
              <div className="md:col-span-2">
                <label className="mb-1 block text-sm font-medium">Destino</label>
                <input
                  value={destino}
                  onChange={(e) => setDestino(e.target.value)}
                  className="w-full rounded-xl border px-3 py-2 outline-none focus:border-indigo-400"
                  placeholder="Direcci√≥n de entrega (calle, nro, ciudad)"
                />
              </div>

              {/* Distancia (auto, editable si hace falta) */}
              <div>
                <label className="mb-1 block text-sm font-medium">Distancia estimada (km)</label>
                <div className="relative">
                  <input
                    value={km}
                    onChange={(e) => setKm(e.target.value)}
                    className="w-full rounded-xl border px-3 py-2 pr-28 outline-none focus:border-indigo-400"
                    placeholder="Ej: 7"
                    inputMode="decimal"
                  />
                  <span className="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 text-xs text-gray-500">
                    {calcStatus === "loading" ? "calculando‚Ä¶" : "auto"}
                  </span>
                </div>
                {calcStatus === "error" && <p className="mt-1 text-xs text-amber-600">{calcMsg}</p>}
                {calcStatus === "loading" && <p className="mt-1 text-xs text-gray-500">{calcMsg}</p>}
              </div>
{/* Mapa */}
<div className="md:col-span-2 space-y-2">
  <div className="flex items-center justify-between">
    <span className="text-sm text-gray-600">
      Hac√© clic en el mapa para fijar origen y destino. Pod√©s arrastrar los marcadores.
    </span>
    <button
      type="button"
      onClick={useMyLocation}
      className="rounded-xl border px-3 py-1.5 text-sm hover:border-indigo-400 hover:bg-indigo-50"
    >
      Usar mi ubicaci√≥n
    </button>
  </div>

  <MapContainer
    center={[-27.3671, -55.8961]}
    zoom={13}
    style={{ height: 360, width: "100%", borderRadius: 16 }}
    ref={mapRef} // ‚úÖ ref al mapa
    whenReady={() => {
      const map = mapRef.current; // ‚úÖ sin 'e'
      if (!map) return;
      // Evitar listeners duplicados en dev/HMR: primero quitamos, luego agregamos
      map.off("click", onMapClick);
      map.on("click", onMapClick);
    }}
  >
    <TileLayer
      attribution="&copy; OpenStreetMap contributors"
      url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
    />

    {from && (
      <Marker
        position={toLatLng(from)}
        icon={jineteIcon}
        draggable
        eventHandlers={{
          dragend: (e) => {
            const m = e.target as L.Marker;
            const ll = m.getLatLng();
            setFrom({ lat: ll.lat, lon: ll.lng });
          },
        }}
      >
        <Popup>Origen</Popup>
      </Marker>
    )}

    {to && (
      <Marker
        position={toLatLng(to)}
        icon={jineteIcon}
        draggable
        eventHandlers={{
          dragend: (e) => {
            const m = e.target as L.Marker;
            const ll = m.getLatLng();
            setTo({ lat: ll.lat, lon: ll.lng });
          },
        }}
      >
        <Popup>Destino</Popup>
      </Marker>
    )}
  </MapContainer>
</div>
              {/* Ayudante / Factura */}
              <div className="flex items-center gap-6">
                <label className="inline-flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={ayudante} onChange={(e) => setAyudante(e.target.checked)} className="h-4 w-4" />
                  Necesito ayudante (+{formatARS(7500)})
                </label>
                <label className="inline-flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={facturaA} onChange={(e) => setFacturaA(e.target.checked)} className="h-4 w-4" />
                  Factura A (+10%)
                </label>
              </div>

              {/* Notas */}
              <div className="md:col-span-2">
                <label className="mb-1 block text-sm font-medium">Notas (opcional)</label>
                <input
                  value={notas}
                  onChange={(e) => setNotas(e.target.value)}
                  className="w-full rounded-xl border px-3 py-2 outline-none focus:border-indigo-400"
                  placeholder="Pisos, horarios, referencias‚Ä¶"
                />
              </div>
            </div>

            {/* RESUMEN */}
            <div className="mt-6 rounded-2xl border bg-gray-50 p-4 text-sm">
              <div className="flex flex-wrap items-center gap-3">
                <span className="font-medium">Resumen:</span>
                <span>Base veh√≠culo: {formatARS(precio.baseVehiculo)}</span>
                <span>‚Ä¢</span>
                <span>{precio.km} km x {formatARS(precio.perKm)} = {formatARS(precio.cargoKm)}</span>
                {ayudante && (<><span>‚Ä¢</span><span>Ayudante: {formatARS(precio.extraAyudante)}</span></>)}
                {anticipado && (<><span>‚Ä¢</span><span className="text-green-700">Descuento anticipo: -{formatARS(precio.descuentoAnticipo)}</span></>)}
                {facturaA && (<><span>‚Ä¢</span><span>Recargo Factura A: {formatARS(precio.recargoFacturaA)}</span></>)}
                <span className="ml-auto text-base font-semibold">Total: {formatARS(precio.total)}</span>
              </div>
            </div>

            {/* Acciones */}
            <div className="mt-4 flex flex-wrap gap-3">
              <a
                href={buildWhatsAppURL()}
                target="_blank"
                className={`inline-flex items-center justify-center rounded-xl px-5 py-2.5 text-white shadow ${
                  canQuote ? "bg-indigo-600 hover:opacity-95" : "bg-gray-300 cursor-not-allowed"
                }`}
                onClick={(e) => { if (!canQuote) e.preventDefault(); }}
              >
                Enviar pedido por WhatsApp
              </a>
              <button
                className="rounded-xl border px-5 py-2.5 hover:border-indigo-400 hover:bg-indigo-50"
                onClick={() => {
                  setNombre(""); setTelefono(""); setOrigen(""); setDestino("");
                  setVehiculo("camioneta"); setKm("5"); setAyudante(false); setFacturaA(false); setNotas("");
                  setPickupAt(""); setFrom(undefined); setTo(undefined); setRoute([]);
                  setCalcStatus("idle"); setCalcMsg("");
                }}
              >
                Limpiar
              </button>
            </div>

            {!canQuote && (
              <p className="mt-2 text-xs text-amber-600">
                Complet√° origen, destino y km para habilitar WhatsApp.
              </p>
            )}
          </div>

          {/* ASIDE: tarjetas de veh√≠culos (solo Camioneta disponible) */}
          <aside className="space-y-4">
            <div className="rounded-2xl border bg-white p-5 shadow-sm">
              <h3 className="mb-2 font-semibold">Eleg√≠ tu veh√≠culo</h3>

              <ul className="grid gap-3">
                {Object.entries(VEHICLES).map(([k, v]) => {
                  const key = k as VehicleKey;
                  const selected = vehiculo === key;
                  const available = VEHICLE_AVAILABLE[key];

                  return (
                    <li
                      key={k}
                      className={`overflow-hidden rounded-2xl border bg-gray-50 transition ${
                        selected ? "ring-2 ring-indigo-500 border-indigo-400" : "hover:border-indigo-300"
                      } ${!available ? "opacity-60" : ""}`}
                    >
                      <button
                        type="button"
                        disabled={!available}
                        aria-disabled={!available}
                        onClick={() => {
                          if (!available) return;
                          setVehiculo(key);
                        }}
                        className={`flex w-full items-center gap-3 p-3 text-left ${
                          !available ? "cursor-not-allowed" : ""
                        }`}
                        title={available ? `Seleccionar ${v.label}` : `${v.label} no disponible`}
                      >
                        <div className="relative h-16 w-24 overflow-hidden rounded-lg bg-white">
                          <img
                            src={VEHICLE_IMAGES[key]}
                            alt={v.label}
                            className="h-full w-full object-cover"
                            onError={(e) => {
                              (e.currentTarget as HTMLImageElement).src =
                                "https://picsum.photos/seed/" + key + "/300/200";
                            }}
                          />
                          {!available && (
                            <span className="absolute right-1 top-1 rounded-full bg-gray-900/80 px-2 py-0.5 text-[10px] font-medium text-white">
                              No disponible
                            </span>
                          )}
                        </div>

                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <span className="font-medium">{v.label}</span>
                            <span className="text-xs text-gray-500">{v.maxVolumen}</span>
                          </div>
                          <div className="text-sm text-gray-600">
                            Base {formatARS(v.base)} ‚Ä¢ {formatARS(v.perKm)}/km
                          </div>
                        </div>
                      </button>
                    </li>
                  );
                })}
              </ul>

              <p className="mt-3 text-xs text-gray-500">
                Las fotos son ilustrativas.
              </p>
            </div>
          </aside>
        </div>
      </section>

      {/* FOOTER */}
      <footer className="border-t bg-white">
        <div className="mx-auto flex max-w-6xl items-center justify-between px-4 py-6 text-sm text-gray-600">
          <span>¬© {new Date().getFullYear()} tuflete</span>
          <a
            className="hover:text-gray-900"
            href="https://github.com/gazzimon/tuflete"
            target="_blank"
            rel="noreferrer"
          >
            GitHub del proyecto
          </a>
        </div>
      </footer>
    </main>
  );
}
